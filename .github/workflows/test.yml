name: ðŸŽ‰ Build Binary Test
on:
  workflow_dispatch:
    inputs:
      buildLinux:
        description: 'æž„å»ºLinuxç‰ˆæœ¬'
        required: true
        default: 'true'
        type: boolean
      buildMacOS:
        description: 'æž„å»ºmacOSç‰ˆæœ¬'
        required: true
        default: 'true'
        type: boolean
      buildWindows:
        description: 'æž„å»ºWindowsç‰ˆæœ¬'
        required: true
        default: 'true'
        type: boolean
jobs:

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ 
          (fromJSON(inputs.buildLinux) && fromJSON(inputs.buildMacOS) && fromJSON(inputs.buildWindows)) && 
          ['ubuntu-22.04', 'macos-13'] || 
          (fromJSON(inputs.buildLinux) && fromJSON(inputs.buildMacOS)) && 
          ['ubuntu-22.04', 'macos-13'] ||
          (fromJSON(inputs.buildLinux) && fromJSON(inputs.buildWindows)) && 
          ['ubuntu-22.04'] ||
          (fromJSON(inputs.buildMacOS) && fromJSON(inputs.buildWindows)) && 
          ['macos-13'] ||
          (fromJSON(inputs.buildLinux)) && 
          ['ubuntu-22.04'] ||
          (fromJSON(inputs.buildMacOS)) && 
          ['macos-13'] ||
          ['ubuntu-22.04'] }}
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
        id: go

      - name: Set up libpcap-dev
        if: matrix.os == 'ubuntu-22.04'
        run: sudo apt-get install libpcap-dev libdbus-1-dev gcc -y

      - name: Set up Darwin libpcap
        if: matrix.os == 'macos-13'
        run: brew install libpcap

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Get dependencies
        run: go mod download

      - name: Build On Linux
        run: go build -o ./ksubdomain_Linux ./cmd/ksubdomain/
        if: matrix.os == 'ubuntu-22.04'
        env:
          GOENABLE: 1
          CGO_LDFLAGS: "-Wl,-static -L/usr/lib/x86_64-linux-gnu/libpcap.a -lpcap -ldbus-1 -Wl,-Bdynamic"
      
      - name: Build On Darwin
        run: go build -o ./ksubdomain_Darwin ./cmd/ksubdomain/
        if: matrix.os == 'macos-13'
        
      - name: Build Windows on Linux
        run: go build -o ./ksubdomain_windows.exe ./cmd/ksubdomain/
        if: matrix.os == 'ubuntu-22.04' && inputs.buildWindows == 'true'
        env:
          GOOS: windows
          GOENABLE: 1

      - name: Upload a build artifact (Linux)
        uses: actions/upload-artifact@v3
        if: matrix.os == 'ubuntu-22.04'
        with:
          name: ksubdomain_Linux_amd64
          path: ksubdomain_Linux
          if-no-files-found: error
          
      - name: Upload a build artifact (Darwin)
        uses: actions/upload-artifact@v3
        if: matrix.os == 'macos-13'
        with:
          name: ksubdomain_Darwin_amd64
          path: ksubdomain_Darwin
          if-no-files-found: error
          
      - name: Upload a build artifact (Windows)
        uses: actions/upload-artifact@v3
        if: matrix.os == 'ubuntu-22.04' && inputs.buildWindows == 'true'
        with:
          name: ksubdomain_Windows_amd64
          path: ksubdomain_windows.exe
          if-no-files-found: error